import React, { Component } from 'react';
import type { IProps, IState } from './App.types';
import type { ChangeFields } from './components/Startup';
import { Playback } from './components/Playback';
import type { LoadRes } from './components/LoadDisc';
import type { Fields } from './components/TruthSettings';
import type { RegenFields } from './components/PathGen';
import type { SelectedRow } from './components/LoadRemoteTable';
import type { OnMetaStartRes, OnStartRes, SaveChange } from './components/SaveRemote';
import { Confirm } from './components/Confirm';
import './App.css';
export declare class App extends Component<IProps, IState> {
    playbackRef: React.RefObject<Playback>;
    confirmRef: React.RefObject<Confirm>;
    menuClasses: string;
    mainClasses: string;
    constructor(props: IProps);
    componentDidMount(): void;
    openErrorModal(errorMsg: string): void;
    startupHandle(): void;
    startupChange(fields: ChangeFields): void;
    playbackLoadStart(): void;
    playbackLoadEnd(err: string | null): void;
    menuIconClicked(): void;
    loadDiscOpen(): void;
    loadDiscClose(): void;
    loadDiscStart(): void;
    loadDiscDone(res: LoadRes | null): void;
    mergeOpen(): void;
    mergeClose(): void;
    mergeStart(): void;
    mergeDone(): void;
    pathGenOpen(): void;
    pathGenClose(): void;
    pathGenAction(fields: RegenFields): void;
    truthSettingsOpen(): void;
    truthSettingsChange(fields: Fields): void;
    truthSettingsClose(): void;
    viewParamsOpen(): void;
    viewParamsClose(): void;
    loadRemoteOpen(): void;
    loadRemoteClose(): void;
    loadRemoteStart(row: SelectedRow): void;
    saveToDisc(): void;
    saveRemoteOpen(): void;
    saveRemoteOpenMeta(): void;
    saveNstClose(): void;
    saveNstChange(fields: SaveChange): void;
    saveNstStart(): Promise<OnStartRes>;
    saveMetaStart(): Promise<OnMetaStartRes>;
    saveNstDone(): void;
    reqConfirm(msg: string): Promise<boolean>;
    render(): JSX.Element;
}
