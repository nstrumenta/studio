// This Source Code Form is subject to the terms of the Mozilla Public
// License, v2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/

/* eslint-disable filenames/match-exported */

import { StorybookConfig } from "@storybook/react-webpack5";
import fs from "fs";
import path from "path";
import { Configuration } from "webpack";

import { makeConfig } from "@foxglove/studio-base/webpack";

const STORY_SUFFIX = /\.stories\.tsx?$/;
/** Workaround for https://github.com/storybookjs/storybook/issues/19446 */
function* findStories(dir: string): Iterable<string> {
  for (const child of fs.readdirSync(dir, { withFileTypes: true })) {
    const childPath = path.join(dir, child.name);
    if (child.isDirectory()) {
      if (child.name === "node_modules" || child.name === ".git") {
        continue;
      }
      yield* findStories(childPath);
    } else if (STORY_SUFFIX.test(child.name)) {
      yield childPath;
    }
  }
}

const storybookConfig: StorybookConfig = {
  stories: [...findStories(path.join(__dirname, ".."))],
  addons: ["@storybook/addon-essentials", "@storybook/addon-actions"],
  framework: {
    name: "@storybook/react-webpack5",
    options: {},
  },
  // Carefully merge our main webpack config with the Storybook default config.
  // For the most part, our webpack config has already been designed to handle
  // all the imports and edge cases we need to support. However, at least some of
  // Storybook's config is required, for instance the HtmlWebpackPlugin that they
  // use to generate the main iframe page.
  webpackFinal: (config: Configuration): Configuration => {
    const studioWebpackConfig = makeConfig(
      undefined,
      { mode: config.mode },
      { allowUnusedVariables: true, version: "0.0.0-storybook" },
    );
    return {
      ...config,
      // context is required for ForkTsCheckerWebpackPlugin to find .storybook/tsconfig.json
      context: path.resolve(__dirname),
      optimization: {
        ...config.optimization,
        minimize: false, // disabling minification improves build performance
      },

      resolve: {
        ...studioWebpackConfig.resolve,
        alias: {
          ...studioWebpackConfig.resolve?.alias,
        },
      },
      module: studioWebpackConfig.module,
      plugins: (config.plugins ?? [])
        // DocgenPlugin adds to the build time and we don't use storybook's autogenerated docs.
        .filter((plugin) => plugin.constructor.name !== "DocgenPlugin")
        .concat(studioWebpackConfig.plugins ?? []),
    };
  },
};

module.exports = storybookConfig;
